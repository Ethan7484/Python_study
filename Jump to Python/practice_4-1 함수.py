### 파이썬 함수의 구조
# 파이썬 함수의 구조는 다음과 같다.
"""
def 함수명(매개변수):
    <수행할 문장1>
    <수행할 문장2>
    ....
"""
# def는 함수를 만들 때 사용하는 예약어이며, 함수 이름은 함수를 만드는 사람이 임의로 만들 수 있다.
# 함수 이름 뒤 괄호 안의 매개 변수는 이 함수에 입력으로 전달되는 값을 받는 변수이다. 이렇게 함수를 정의한 다음
# if, while, for문 등과 마찬가지로 함수에서 수행할 문장을 입력한다.

# 간단하지만 많은 것을 설명해 주는 다음 예를 살펴보자.
"""
def add(a, b):
    return a + b
"""
# print(add(4, 5))
# 위 함수는 다음과 같이 풀이된다. "이 함수의 이름(함수 이름)은 add이고 입력으로 2개의 값을 받으며 결과값은 2개의 입력값을 더한 값이다."
# 여기에서 return은 함수의 결과값을 돌려주는 명령어이다. 먼저 다음과 같이 add 함수를 만들자.
"""
def add(a, b):
    return a + b
# 이제 직접 add 함수를 사용해보자.
a = 3
b = 4
c = add(a, b)
print(c)
"""
# 변수 a에 3, b에 4를 대입한 다음 앞에서 만든 add 함수에 a와 b를 입력값으로 넣어준다. 그리고 변수 c에
# add 함수의 결과값을 대입하면 "print(c)"로 c의 값을 확인할 수 있다.



### 매개변수와 인수
# 매개변수(parameter)와 인수(arguments)는 혼용해서 사용되는 헷갈리는 용어이므로 잘 기억해 두자.
# 매개변수는 함수에 입력으로 전달된 값을 받는 변수를 의미하고 인수는 함수를 호출할 때 전달하는 입력값을 의미한다.
"""
def add(a, b):    # a, b는 매개 변수
    return a + b

print(add(3, 4))    # 3, 4는 인수
"""


### 입력값과 결괏값에 따른 함수의 형태
# 함수는 들어온 입력값을 받아 어떤 처리를 하여 결괏값을 돌려준다.
"""
입력값 ----> 함수 ----> 결괏값
"""
# 함수의 형태는 입력값과 결괏값의 존재 유무에 따라 4가지 유형으로 나뉜다.

"""
일반적인 함수
"""
# 입력값이 있고 결괏값이 있는 함수가 일반적인 함수이다. 앞으로 여러분이 프로그래밍을 할 때 만들 함수는 대부분 다음과 비슷한 형태일 것이다.
"""
def 함수이름 (매개변수):
    <수행할 문장>
    ...
    return 결과값
"""
# 다음은 일반 함수의 전형적인 예이다.
"""
def add(a, b):
    result = a + b
    return result
"""
# add 함수는 2개의 입력값을 받아서 서로 더한 결괏값을 돌려준다.
"""
a = add(5, 10)
print(a)
"""
# 이처럼 입력값과 결괏값이 있는 함수의 사용법을 정리하면 다음과 같다.
# 결괏값을 받을 변수 = 함수이름(입력인수1, 입력인수2, ....)



### 입력값이 없는 함수
# 입력값이 없는 함수가 존재할까? 당연히 존재한다. 다음을 보자.
"""
def say():
    return 'Hi'

a = say()
print(a)
"""
# 위 함수를 쓰기 위해서 say()처럼 괄호 안에 아무 값도 넣지 않아야 한다. 이 함수는 입력값은 없지만 결괏값으로 Hi라는 문자열을 돌려준다.
# a = say()처럼 작성하면 a에 Hi 문자열이 대입되는 것이다.
# 이처럼 입력값이 없고 결과값만 있는 함수는 다음과 같이 사용된다.
"""
결과값을 받을 변수 = 함수이름()
"""


"""
결과값이 없는 함수
"""
# 결과값이 없는 함수 역시 존재한다. 다음 예를 보자.

def add(a, b):
    print("%d, %d의 합은 %d입니다." % (a, b, a+b))

a = add(3, 5)
b = add(10, 11)
# 아마도 여러분은 '3, 4의 합은 7입니다.'라는 문장을 출력해주었기 때문에 왜 결괏값이 없다는 것인지 의아하게 생각할 것이다.
# 이 부분이 초보자들이 혼란스러워하는 부분이기도 한데 print문은 함수의 구성 요소 중 하나인 "<수행할 문장>"에 해당하는 부분일 뿐이다.
# 결괏값은 당연히 없다. 결괏값은 오직 return 명령어로만 돌려받을 수 있다.
# 이를 확인해 보자. 돌려받을 값을 a 변수에 대입하여 출력해보면 결괏값이 있는지 없는지 알 수 있다.

a = add(3, 4)
print(a)
# a값은 None이다. None이란 거짓을 나타내는 자료형이라고 언급한 적이 있다. add 함수처럼 결괏값이 없을 때 "a = add(3, 4)"처럼 쓰면
# 함수 add는 반환 값으로 a 변수에 None을 돌려준다. 이것을 가지고 결괏값이 있다고 생각하면 곤란하다.



"""
입력값도 결괏값도 없는 함수
"""
# 입력값도 결괏값도 없는 함수 엯디 존재한다. 다음 예를 보자.
def say():
    print('Hi')
# 입력 인수를 받는 매개변수도 없고 return문도 없으니 입력값도 결괏값도 없는 함수이다.
# 이 함수를 사용하는 방법은 단 한가지이다. 
say()
# 즉 입력값도 결괏값도 없는 함수는 다음과 같이 사용한다.
"""
함수이름()
"""



### 매개변수 지정하여 호출하기
# 함수를 호출할 때 매개변수를 지정할 수도 있다. 다음 예를 보자.
def add(a, b):
    return a + b
# 앞에서 알아본 add 함수이다. 이 함수를 다음과 같이 매개변수를 지정하여 사용할 수 있다.
result1 = add(a=3, b=7)    # a에 3, b에 7을 전달
print(result1)
# 매개변수를 지정하면 다음과 같이 순서에 상관없이 사용할 수 있다는 장점이 있다.
result = add(b=5, a=3)    # b에 5, a에 3을 전달
print(result)



### 입력값이 몇 개가 될지 모를 때는 어떻게 해야 할까?
# 입력값이 여러개 일 때 그 입력값을 모두 더해 주는 함수를 생각해 보자. 하지만 몇 개가 입력될지 모를 때는 어떻게 해야 할까? 아마도 난감할 것이다.
# 파이썬은 이런 문제를 해결하기 위해 다음과 같은 방법을 제공한다.
"""
def 함수 이름(*매개변수):
    <수행할 문장>
    ....
"""
# 일반적으로 볼 수 있는 함수 형태에서 괄호 안의 매개변수 부분이 *매개변수로 바뀌었다.


"""
여러 개의 입력값을 받는 함수 만들기
"""
# 다음 예를 통해 여러 개의 입력값을 모두 더하는 함수를 직접 만들어 보자. 예를 들어 "add_many(1, 2)"이면 3을
# "add_many(1,2,3)"이면 6을, "add_many(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"이면 55를 돌려주는 함수를 만들어보자.

def add_many(*args):
    result = 0
    for i in args:
        result = result + i
    return result

a = add_many(1, 2)
print(a)
a = add_many(1, 2, 3)
print(a)
a = add_many(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(a)
# 위에서 만든 add_many 함수는 입력값이 몇 개이든 상관이 없다. "*args"처럼 매개변수 이름 앞에 *를 붙이면 입력값을 전부 모아서
# 튜플로 만들어 주기 때문이다. 만약 "add_many(1, 2, 3)"처럼 이 함수를 쓰면 args는 "(1, 2, 3)"이 되고, "add_many(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"
# 처럼 쓰면 args는 "(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"이 된다. 여기에서 "*args"는 임의로 정한 변수 이름이다.
# "*pey", "*python"처럼 아무 이름이나 써도 된다.
"""
args는 매개변수를 뜻하는 영어 단어 arguments의 약자이며 관례적으로 자주 사용한다.
"""
# 실제로 이 함수를 직접 실행해 보자.
result = add_many(1, 2)
print(result)
result = add_many(1, 2, 3)
print(result)
result = add_many(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
print(result)