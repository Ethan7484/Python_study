### 변수는 어떻게 만들까?
# 다음 예와 같은 a, b, c를 변수라고 한다.
# a = 1
# b = "python"
# c = [1, 2, 3]
# print(a)
# print(b)
# print(c)
# 변수 이름 = 변수에 저장할 값


### 변수란?
# 파이썬에서 사용하는 변수는 객체를 가리키는 것이라고도 말할 수 있다. 객체란 우리가 지금껏 보아 온 자료형과 같은 것을 의미하는 말이다.
# a = [1, 2, 3]
# 만약 위 코드처럼 a = [1, 2, 3]이라고 하면 [1, 2, 3] 값을 가지는 리스트 자료형(객체)이 자동으로 메모리에 생성되고
# 변수 a는 [1, 2, 3] 리스트가 저장된 메모리의 주소를 가리키게 된다.

# a 변수가 가리키는 메모리의 주소는 다음과 같이 확인할 수 있다.
# a = [1, 2, 3]
# print(id(a)) # id 함수는 변수가 가리키고 있는 객체의 주소 값을 돌려주는 파이썬 내장 함수이다. 
             # 즉 여기에서 필자가 만든 변수 a가 가리키는 [1, 2, 3] 리스트의 주소 값은 1194267481920 임을 알 수 있다.



### 리스트를 복사하고자 할 때
# 여기에서는 리스트 자료형에서 가장 혼동하기 쉬운 '복사'에 대해 설명하겠다. 다음 예를 통해 알아보자.
# a = [1, 2, 3]
# b = a
# b 변수에 a 변수를 대입하면 어떻게 될까? b와 a는 같은 걸까 다른 걸까? 결론부터 말하면 b는 a와 완전히 동일하다고 할 수 있다
# 다만, [1, 2, 3] 리스트를 참조하는 변수가 a 변수 1개에서 b 변수가 추가되어 2개로 늘어났다는 차이만 있을 뿐이다.

# id 함수를 사용하면 이러한 사실을 확인할 수 있다.
# print(id(a)) # 2763810266496
# print(id(b)) # 2763810266496

# id(a)의 값이 id(b)의 값과 동일함을 확인할 수 있다. 즉 a가 가리키는 대상과 b가 가리키는 대상이 동일하다는 것을 알 수 있다.
# 동일한 객체를 가리키고 있는지에 대해 판단하는 파이썬 명령어 is를 다음과 같이 실행해도 역시 참(True)를 돌려준다.
# print(a is b) # a와 b가 같은지 판단하는 것. True 값을 반환

# 이제 다음 예를 계속해서 수행해보자
# a[1] = 4
# print(a)
# print(b)
# a 리스트의 두번째 요소값을 4로 바꾸었더니 a만 바뀌는 것이 아니라 b도 똑같이 바뀌었다. 그 이뉴는 앞에서 살펴본 것처럼 a, b 모두 동일한 리스트를 가리키고 있기 때문이다.
# 그렇다면 b 변수를 생성할 때 a 변수의 값을 가져오면서 a와 다른 주소를 가리키도록 만들 수는 없을까? 다음 2가지 방법이 있다.

"""
1. [:] 이용
"""
# 첫번째 방법으로는 다음과 같이 리스트 전체를 가리키는 [:]를 사용해서 복사하는 것이다.
a = [1, 2, 3]
# b = a[:]      # b가 a를 가리키게 하면서도 id는 다르게 할당하는 방법
# print(id(a))
# print(id(b))
# a[1] = 4
# print(a)
# print(b)
# 위 예에서 볼 수 있듯이 a 리스트 값을 바꾸더라도 b 리스트에는 영향을 끼치지 않는다.

"""
2. copy 모듈 이용
"""
# 두번째는 copy 모듈을 사용하는 방법이다. 다음 예를 보면 from copy inport copy라는 처음 보는 형태의 문장이 나오는데
# 이것은 뒤에 설명할 파이썬 모듈 부분에서 자세히 다룬다. 여기에서는 단순히 copy 함수를 쓰기 위해서 사용하는 것이라고만 알아두자.
from copy import copy
b = copy(a)
print(a is b)
# 위 예에서 b is a가 False를 돌려주므로 b와 a가 가리키는 객체는 서로 다르다는 것을 알 수 있다.



### 변수를 만드는 여러가지 방법
a, b = ("python", "life")
# 위 예문처럼 튜플로 a, b에 값을 대입할 수 있다. 이 방법은 다음 예문과 완전히 동일하다
(a, b) = "python", "life"
# 튜플 부분에서도 언급했지만 튜플은 괄호를 생략해도 된다.

# 두 변수가 같은 값을 가지면서 다른 객체를 제대로 생성했는지 다음과 같이 확인해보자.
print(b is a)
# 위 예에서 b is a가 False를 돌려주므로 b와 a가 가리키는 객체는 서로 다르다는 것을 알 수 있다.


### 변수를 만드는 여러가지 방법

a, b = ("python", "life")
# 위 예문처럼 튜플로 a, b에 값을 대입할 수 있다. 이 방법은 다음 예문과 완전히 동일하다
(a, b) = "python", "life"
# 튜플 부분에서도 언급했지만 튜플은 괄호를 생략해도 된다. 

# 다음처럼 리스트로 변수를 만들 수도 있다.
[a, b] = ["python", "life"]
print([a,b])

# 또한 여러 개의 변수에 같은 값을 대입할 수 도 있다. 
a = b = "python"
print(a)
print(b)

# 파이썬에서는 위 방법을 사용하여 두 변수의 값을 아주 간단히 바꿀 수 있다.
a = 3
b = 5
a, b = b, a
print(a)
print(b)
# 처음에 a에 3, b에는 5가 대입되어 있었지만 a, b = b, a 문장을 수행한 후에는 그 값이 서로 바뀌었음을 확인할 수 있다.
