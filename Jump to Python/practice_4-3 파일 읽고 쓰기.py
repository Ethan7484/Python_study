# 우리는 이 책에서 이제까지 값을 "입력"받을 때는 사용자가 직접 입력하는 방식을 사용했고 "출력"할 때는
# 모니터 화면에 결괏값을 출력하는 방식으로 프로그래밍해 왔다. 하지만 입출력 방법이 꼭 이것만 있는 것은 아니다.
# 이번에는 파일을 통한 입출력 방법에 대해 알아보자. 여기에서는 파일을 새로 만든 다음 프로그램이 만든 결괏값을 새 파일에 적어볼 것이다.
# 또 파일에 적은 내용을 읽고, 새로운 내용 추가하는 방법도 알아볼 것이다.



### 파일 생성하기
# 다음 소스 코드를 에디터로 작성해서 저장한 후 실행해보자. 프로그램을 실행한 디렉터리에 새로운 파일이 하나 생성된 것을 확인할 수 있을 것이다.

f = open("새파일.txt", 'w')
# f.close()

# 파일을 생성하기 위해 우리는 파이썬 내장 함수 open을 사용했다. open 함수는 다음과 같이 "파일 이름"과 "파일 열기 모드"를
# 입력값으로 받고 결괏값으로 파일 객체를 돌려준다. 
# 파일 객체 = open(파일 이름, 파일 열기 모드)
# 파일 열기 모드에는 다음과 같은 것들이다.
"""
파일 열기 모드 | 설명
r              | 읽기모드 - 파일을 읽기만 할 때 사용
w              | 쓰기모드 - 파일에 내용을 쓸 때 사용
a              | 추가모드 - 파일의 마지막에 새로운 내용을 추가 시킬 때 사용
"""
# 파일을 쓰기 모드로 열면 해당 파일이 이미 존재할 경우 원래 있던 내용이 모두 사라지고, 해당 파일이 존재하지 않으면
# 새로운 파일이 생성된다. 위 예에서는 디렉터리에 파일이 없는 상태에서 새파일.txt를 쓰기모드인 'w'로 열었기 때문에 새파일.txt라는
# 이름의 새로운 파일이 현재 디렉터리에 생성되는 것이다.

# 만약 새파일.txt 파일을 "C:/Python38" 디렉터리에 생성하고 싶다면 다음과 같이 작성해야 한다.
"""
f = open("C:/Python38/새파일.txt", 'w')
f.close()
"""
# 위 예에서 "f.close()"는 열려 있는 파일 객체를 닫아 주는 역할을 한다. 사실 이 문장은 생략해도 된다.
# 프로그램을 종료할 때 파이썬 프로그램이 열려 있는 파일의 객체를 자동으로 닫아주기 때문이다. "close()"를 사용해서 열려 있는 파일을
# 직접 당아주는 것이 좋다. 
# 쓰기모드로 열었떤 파일을 닫지 않고 다시 사용하려고 하면 오류가 발생하기 때문이다. (근데 왜 오류 안남?)



### 파일을 쓰기 모드로 열어 출력값 적기
# 위 예에서 파일을 쓰기 모드로 열기만 했지 정작 아무것도 쓰지 않았다. 이번에는 에디터를 열고 프로그램의 출력값을 파일에 직접 써보자.

# writedata.py
f = open("새파일.txt", 'w')
for i in range(1, 11):



