# 2-6 집합 자료형

### 집합 자료형은 어떻게 만들까?
# 집합 자료형은 다음과 같이 set 키워드를 사용해 만들 수 있다.
# s1 = set([1, 2, 3]) # set 키워드를 통해 집합 자료형을 만들 수 있음.
# print(s1) # 집합 s1을 출력
# 위와 같이 set()의 괄호 안에 리스트를 입력하거나 다음과 같이 문자열을 입력하여 만들 수도 있음
# s2 = set("Hello")
# print(s2)
# s3 = set() # 비어 있는 집합은 set()로 만들 수 있음
# print(s3)
# s4 = set("aabbccddeeff")
# print(s4)


### 집합 자료형의 특징
# set에 2가지 큰 특징. 1 = 중복을 허용하지 않음, 2 = 순서가 없음(Unordered)
# set 자료형은 순서가 없기 때문에 인덱싱으로 값을 얻을 수 없음
# 만약 set에 저장된 값을 인덱싱으로 접근하려면, 리스트나 튜플로 변환 후 사용해야 함
  # 중복을 허용하지 않는 set의 특징은 자료형의 중복을 제거하기 위한 필터 역할로 종종 사용하기도 한다.
# s1 = set([3, 2, 1])
# l1 = list(s1)
# print(l1) # s1을 리스트(순서)로 출력
# print(l1[0]) # s1을 리스트로 변환 후 0의 값을 출력

# t1 = tuple(s1) # s1을 튜플로 변환
# print(t1) # t1 출력
# print(t1[0]) # s1을 튜플로 변환한 t1의 0의 값을 출력


### 교집합, 합집합, 차집합 구하기
# set 자료형을 정말 유용하게 사용하는 경우는 교집합, 합집합, 차집합을 구할 때
# s1 = set([1, 2, 3, 4, 5, 6])
# s2 = set([4, 5, 6, 7, 8, 9])

"""
1. 교집합
"""
# s1과 s2의 교집합을 구해보자
# print(s1 & s2) # "&" 기호를 이용하면 교집합을 간단히 구할 수 있음
# print(s1.intersection(s2)) # 또는 intersection 함수를 사용해도 됨
# print(s2.intersection(s1)) # 반대로 사용해도 결과값은 동일함

"""
2. 합집합
"""
# print(s1 | s2) # 합집합은 다음과 같이 "|" 기호를 이용하여 구할 수 있고, 중복된 값은 한개만 출력됨
# print(s1.union(s2)) # 또는 union 함수를 사용해도 됨
# print(s2.union(s1)) # 값을 반대로 사용해도 동일한 결과가 출력됨

"""
3. 차집합
"""
# print(s1-s2) # s1-s2를 이용해 차집합을 구할 수 있음
# print(s2-s1)


### 집합 자료형 관련 함수들
"""
1. 값 1개 추가하기 (add)
"""
# 이미 만들어진 자료형에 값을 추가할 수 있음. 1개의 값만 추가할 경우는 아래와 같음
# s1 = set([1, 2, 3]) # [1,2,3] 값을 가진 s1 집합을 만듦
# s1.add(4)           # s1에 4를 추가함
# print(s1)

"""
2. 값 여러 개 추가하기 (update)
"""
# 여러 개의 값을 추가할 때는 다음과 같이 하면 됨.
# s1 = set([1, 2, 3])
# s1.update([4,5,6])  # 여러 개의 값을 추가할 때는 update 함수를 사용
# print(s1)

"""
3. 특정 값 제거하기 (remove)
"""
s1 = set([1, 2, 3])
s1.remove(2)  # s1에서 2를 삭제
print(s1)