### abs
# abs(x)는 어떤 숫자를 입력받았을 때, 그 숫자의 절댓값을 돌려주는 함수이다.
"""
print(abs(3))    # 3을 출력
print(abs(-3))   # 3을 출력
print(abs(-1.2))    # 1.2를 출력 
"""



### all
# all(x)는 반복 가능한(iterable) 자로형 x를 입력 인수로 받으며 이 x의 요소가 모두 참이면 True,
# 거짓이 하나라도 있으면 False를 돌려준다.
# >> 반복 가능한 자료형이란 for문으로 그 값을 출력할 수 있는 것을 의미한다.
# 다음 예를 보자
"""
all([1, 2, 3])
print(all([1, 2, 3]))
"""
# 리스트 자료형 [1, 2, 3]은 모든 요소가 참이므로 True를 돌려준다.
"""
all([1, 2, 3, 0])
print(all([1, 2, 3, 0]))
"""
# 만약 all의 입력 인수가 빈 값이 경우에는 True를 리턴한다.
# >> 자료형의 참과 거짓에 대해 잘 기억나지 않는다면 2-7을 다시 한번 읽어보자.



### any 
# any(x)는 반복 가능한(iterable) 자로형 x를 입력 인수로 받으며 이 x의 요소 중 하나라도 참이 있으면 True를 톨려주고
# x가 모두 거짓일 때에만 False를 돌려준다. all(x)의 반대이다.

"""
a = any([1, 2, 3, 0])    
print(a)    # 리스트 자료형 [1, 2, 3, 0] 중에서 1, 2, 3이 참이므로 True를 돌려준다.
b = any([0, ""])    
print(b)    # 리스트 자료형 [0, ""]의 요소 0과 ""은 모두 거짓이므로 False를 돌려준다.
c = any([])
print(c)    # 만약 any의 입력 인수가 빈 값인 경우에는 False를 돌려준다.
"""



### chr
# chr(i)는 아스키(ASCII) 코드 값을 입력받아 그 코드에 해당하는 문자를 출력하는 함수이다.
# >> 아스키 코드란 0에서 127 사이의 숫자를 각각 하나의 문자 또는 기호에 대응시켜 놓은 것이다.
"""
print(chr(97))    # 'a'
print(chr(48))    # '0'
print(chr(33))    # '!'
"""



### dir
# dir은 객체가 자체적으로 가지고 있는 변수나 함수를 보여준다. 다음 예는 리스ㅡ와 딕셔너리 객체 관련 함수(메서드)를 보여 주는 예이다.
# 우리가 02장에서 살펴본 자료형 관련 함수를 만나 볼 수 있다.

"""
dir([1, 2, 3])
print(dir([1, 2, 3]))
dir({'1':'a'})
print(dir({'1':'a'}))
"""



### divmod
# divmod(a, b)는 2개의 숫자를 입력으로 받는다. 그리고 a를 b로 나눈 몫과 나머지를 튜프 형태로 돌려주는 함수이다.

"""
divmod(7, 3)
print(divmod(7, 3))
"""



### enumerate
# enumerate는 "열거하다"라는 뜻이다. 이 함수는 순서가 있는 자료형(리스트, 튜플, 문자열)을 입력으로 받아 인덱스 값을 포함하는 enumerate 객체를 돌려준다.
# >> 보통 enumerate 함수는 다음 예제처럼 for문과 함께 자주 사용한다. 
# 잘 이해되지 않으면 다음 예를 보자.

"""
for i, name in enumerate(['body', 'foo', 'bar']):
  print(i, name)
"""

# 순서 값과 함께 body, foo, bar가 순서대로 출력되었다. 즉 위 예제와 같이 enumerate를 for문과 함께 사용하면 자료형의 현재 순서(index)와 그 값을 쉽게 알 수 있다.
# for문처럼 반복되는 구간에서 객체가 현재 어느 위치에 있는지 알려 주는 인덱스 값이 필요할 때 enumerate 함수를 사용하면 매우 유용하다.



### eval
# eval(expression)은 실행 가능한 문자열(1 + 2, 'hi' + 'a')을 입력으로 받아 문자열을 실행한 결괏값을 돌려주는 함수이다.

"""
print(eval('1 + 2'))    # 3
print(eval("'hi' + 'a'"))    # hia
print(eval('divmod(4, 3)'))    # (1, 1)
"""

# 보통 eval은 입력받은 문자열로 파이썬 함수나 클래스를 동적으로 실행하고 싶을 때 사용한다.



### filter
# filter란 무엇인가를 걸러낸다는 뜻으로 filter 함수도 동일한 의미를 가진다.
# filter 함수는 첫 번째 인수로 함수 이름을, 두 번째 인수로 그 함수에 차례로 들어갈 반복 가능한 자료형을 받는다.
# 그리고 두 번째 인수인 반복 가능한 자료형 요소가 첫 번째 인수인 함수에 입력되었을 때 반환 값이 참인 것만 묶어서(걸러 내서) 돌려준다.
# 다음 예를 보자

"""
#positive.py
def positive(l):
  result = []
  for i in l:
    if i > 0:
      result.append(i)
  return result

print(positive([1, -3, 2, 0, -5, 6]))    # [1, 2, 6]
"""

# 즉 위에서 만든 positive 함수는 리스트를 입력값으로 받아 각각의 요소를 판별해서 양수 값만 돌려주는 함수이다. 
# filter 함수를 사용하면 위 내용을 다음과 같이 간단하게 작성할 수 있다.

"""
# filter1.py
def positive(x):
  return x > 0

print(list(filter(positive, [1, -3, 2, 0, -5, 6])))    # [1, 2, 6]
"""

# 여기에서 두 번째 인수인 리스트의 요소들이 첫 번째 인수인 positive 함수에 입력되었을 때 반환 값이 참인 것만 묶어서 돌려준다.
# 앞의 예에서는 1, 2, 6만 양수여서 X > 0 문장이 참이되므로 [1, 2, 6]이라는 결괏값을 돌려주게 된 것이다.
# 앞의 함수는 lambda를 사용하면 더욱 간편하게 코드를 작성할 수 있다. 

"""
print(list(filter(lambda x: x > 0, [1, -3, 2, 0, -5, 6])))    # [1, 2, 6]
"""



### hex
# hex(x)는 정수 값을 입력받아 16진수(hexadecimal)로 변환하여 돌려주는 함수이다. 

"""
print(hex(234))    #0xea
print(hex(3))    # 0x3
"""



### id
# id(object)라는 객체를 입력받아 객체의 고유 주소 값(레퍼런스)을 돌려주는 함수이다.

"""
a = 3
print(id(3))    #140716428822240
print(id(a))    #140716428822240
b = a
print(id(b))    #140716428822240
"""

# 위 예의 3, a, b는 고유 주소 값이 모두 140716428822240이다. 즉 3, a, b가 모두 같은 객체를 가리키고 있다.
# 만약 id(4)라고 입력하면 4는 3, a, b와 다른 객체이므로 당연히 다른 고유 주소 값이 출력된다.

"""
print(id(4))    # 140716428822272
"""




### int
# int(x)는 문자열 형태의 숫자나 소수점이 있는 숫자 등을 정수 형태로 돌려주는 함수로, 정수를 입력으로 받으면 그대로 돌려준다.
"""
print(int('3'))    # 3
print(int(3.4))    # 3
"""
# int(x, radix)는 radix 진수로 표현된 문자열x를 10진수로 변환하여 돌려준다.
# 2진수로 표현된 11의 10진수 값은 다음과 같이 구한다.
"""
print(int('11', 2))    # 2진수 11을 10진수로 변환, 3을 돌려준다.
"""
# 16진수로 표현된 1A의 10진수 값은 다음과 같이 구한다.
"""
print(int('1A', 16))    # 26
"""



### isinstance
# isinstance(object, class)는 첫 번째 인수로 인스턴스, 두 번째 인수로 클래스 이름을 받는다. 
# 입력으로 받은 인스턴스가 그 클래스의 인스턴스인지를 판단하여 참이면 True, 거짓이면 False를 돌려준다.

"""
class Person: pass

a = Person()
print(isinstance(a, Person))    # True를 돌려준다.
"""
# 위 예는 a가 Person 클래스가 만든 인스턴스임을 확인시켜 준다.

"""
b = 3
print(isinstance(b, Person))    # False를 돌려준다.
"""
# b는 Person 클래스가 만든 인스턴스가 아니므로 False를 돌려준다. 



### len
# len(s)은 입력값 s의 길이(요소의 전체 개수)를 돌려주는 함수이다.

"""
print(len("Python"))    # 6
print(len([1, 2, 3]))   # 3
print(len((1, 'a')))    # 2
"""



### list
# list(s)는 반복 가능한 자료형 s를 입력받아 리스트로 만들어 돌려주는 함수이다.
"""
print(list("Python"))     # ['P', 'y', 't', 'h', 'o', 'n']
print(list((1, 2, 3)))    # [1, 2, 3]
"""
# list 함수에 리스트를 입력으로 주면 똑같은 리스트를 복사하여 돌려준다.

"""
a = [1, 2, 3]
b = list(a)
print(b)    # [1, 2, 3]
c = a
print(c)
"""

